@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_AppLayout.cshtml";
    string[] pageSizes = { "10", "50", "All" };
}

<style>

    .k-grid-actions {
        display: inline-block;
        margin-left: 5px;
    }

    .k-grid a {
        margin-left: 5px;
    }

    .divButton {
        margin-bottom: 10px;
        text-align: right;
    }

    .k-grid .k-grid-search {
        display: flex;
        margin-left: auto;
        margin-right: 0;
    }

    .k-toolbar .k-input {
        width: 15em;
    }

    /*button.k-grid-update .k-button-text {
        position: relative;
        visibility: hidden;
    }

        button.k-grid-update .k-button-text:after {
            content: "Update";
            position: absolute;
            visibility: visible;
            left: 0;
            top: 0;
        }*/

    .k-window-title {
        position: relative;
        visibility: hidden;
    }

        .k-window-title:after {
            content: "Create or Update device";
            color: #0d6efd;
            position: absolute;
            visibility: visible;
            left: 0;
        }
    
</style>

<div style="margin-top: 20px">

    <div>
        @(Html.Kendo().TabStrip()
        .Name("tabTask")
        .Items(tabstrip =>
        {
            tabstrip.Add().Text("KSP")
            .Content(@<text>

            <div class="divButton">
            @(Html.Kendo().Button()
            .Name("taskManageButtonKSP")
            .HtmlAttributes( new {type = "button" } )
            .ThemeColor(ThemeColor.Tertiary)
            .Content("KSP Task Manage")
            .Events(e => e.Click("gotoTaskManageKSP"))
            )
            </div>

        @(Html.Kendo().Grid<ITHELPDESK.Controllers.TodoListController.MachineInformation>
                ()
                .Name("GridKSP")
                .Columns(columns =>
                {
                    columns.Bound(p => p.ComputerName);
                    columns.Bound(p => p.Username);
                    columns.Bound(p => p.Tasks);
                    columns.Bound(p => p.Location);
                    columns.Command(command =>
                    {
                        command.Custom("TaskBoard").Text(" ").Click("gotoTaskBoard").IconClass("k-icon k-i-list-unordered");
                        command.Edit().Text(" ");
                        command.Custom("Update").Text(" ").Click("UpdateTaskKSP").IconClass("k-icon k-i-arrow-rotate-cw");
                        command.Destroy().Text(" ").HtmlAttributes(new { style = "background-color: #c0392b;" });
                    }).Width(200);
                })
                .Filterable()
                .LoaderType(GridLoaderType.LoadingPanel)
                .Height("auto")
                .ToolBar(toolbar => { toolbar.Create().Text("Add new"); toolbar.Search(); })
                .Editable(editable => editable.Mode(GridEditMode.PopUp))
                .Pageable(p => p.PageSizes(pageSizes))
                .Sortable()
                .Events(e => e.Edit("onPopup"))
                .ClientDetailTemplateId("templateKSP")
                .DataSource(dataSource => dataSource
                    .Ajax()
                    .PageSize(10)
                    .Events(e => e.Sync("RefreshGridKSP").Error("onError"))
                    .Model(model => model.Id(p => p.ComputerName))
                    .Read("CardViewKSP_Read", "TodoList")
                    .Update("CardUpdate", "TodoList")
                    .Create("CreateCardKSP", "TodoList")
                    .Destroy("CardDestroy", "TodoList")
                )
        )
        </text>);

            tabstrip.Add().Text("HQ")
            .Content(@<text>

        <div class="divButton">
        @(Html.Kendo().Button()
        .Name("taskManageButtonHQ")
        .HtmlAttributes( new {type = "button" } )
        .ThemeColor(ThemeColor.Tertiary)
        .Content("HQ Task Manage")
        .Events(e => e.Click("gotoTaskManageHQ"))
        )
        </div>

        @(Html.Kendo().Grid<ITHELPDESK.Controllers.TodoListController.MachineInformation>
                ()
                .Name("GridHQ")
                .Columns(columns =>
                {
                    columns.Bound(p => p.ComputerName);
                    columns.Bound(p => p.Username);
                    columns.Bound(p => p.Tasks);
                    columns.Bound(p => p.Location);
                    columns.Command(command =>
                    {
                        command.Custom("TaskBoard").Text(" ").Click("gotoTaskBoard").IconClass("k-icon k-i-list-unordered");
                        command.Custom("Update").Text(" ").Click("UpdateTaskHQ").IconClass("k-icon k-i-arrow-rotate-cw");
                        command.Destroy().Text(" ").HtmlAttributes(new { style = "background-color: #c0392b;" });
                    }).Width(200);
                })
                .Filterable()
                .LoaderType(GridLoaderType.LoadingPanel)
                .Height("auto")
                .ToolBar(toolbar => { toolbar.Create().Text("Add new"); toolbar.Search(); })
                .Editable(editable => editable.Mode(GridEditMode.PopUp))
                .Pageable(p => p.PageSizes(pageSizes))
                .Sortable()
                .ClientDetailTemplateId("templateHQ")
                .DataSource(dataSource => dataSource
                    .Ajax()
                    .PageSize(10)
                    .Events(e => e.Sync("RefreshGridHQ").Error("onError"))
                    .Model(model => model.Id(p => p.ComputerName))
                    .Read("CardViewHQ_Read", "TodoList")
                    .Update("Update", "TodoList")
                    .Create("CreateCardHQ", "TodoList")
                    .Destroy("Destroy", "TodoList")
                )
        )
        </text>);
        }).SelectedIndex(ViewBag.Select)
    )

    </div>
</div>


<script id="templateKSP" type="text/kendo-tmpl">
    @(Html.Kendo().Grid<ITHELPDESK.Models.CardReadDetails>()
                        .Name("grid_#=ComputerName#")
                        .Columns(columns =>
                        {
                            columns.Bound(o => o.ComputerName).Title("Computer Name");
                            columns.Bound(o => o.TaskID).Title("Task ID");
                            columns.Bound(o => o.Title).Title("Title");
                            columns.Bound(o => o.Description).Title("Description");
                            columns.Bound(o => o.StatusName);
                            columns.Command(command =>
                            {
                                command.Custom("tbEditKSP").Text(" ").Click("gotoTaskSubCardEdit").IconClass("k-icon k-i-track-changes-enable");
                            }).Width(120);
                        })
                        .ToolBar(t => t.Search())
                        .DataSource(dataSource => dataSource
                            .Ajax()
                            .PageSize(10)
                            .Group(g => g.Add(p => p.StatusName))
                            .Model(model => model.Id(p => p.TaskID))
                            .Read(read => read.Action("CardView_Read_Details", "TodoList", new { ComputerName = "#=ComputerName#" }))
                        )
                        .Pageable(p => p.PageSizes(pageSizes))
                        .Groupable()
                        .Sortable()
                        .ToClientTemplate())
</script>

<script id="templateHQ" type="text/kendo-tmpl">
    @(Html.Kendo().Grid<ITHELPDESK.Models.CardReadDetails>()
                        .Name("grid_#=ComputerName#")
                        .Columns(columns =>
                        {
                            columns.Bound(o => o.ComputerName).Title("Computer Name");
                            columns.Bound(o => o.TaskID).Title("Task ID");
                            columns.Bound(o => o.Title).Title("Title");
                            columns.Bound(o => o.Description).Title("Description");
                            columns.Bound(o => o.StatusName);
                        })
                        .ToolBar(t => t.Search())
                        .DataSource(dataSource => dataSource
                            .Ajax()
                            .PageSize(10)
                            .Read(read => read.Action("CardView_Read_Details", "TodoList", new { ComputerName = "#=ComputerName#" }))
                        )
                        .Pageable(p => p.PageSizes(pageSizes))
                        .Groupable()
                        .Sortable()
                        .ToClientTemplate())
</script>

<script>

    function onPopup(e) {
        if (e.model.isNew() == false) {
            $("#ComputerName").attr("readonly", true);
        }
    }

    function gotoTaskBoard(e) {
        e.preventDefault();
        var dataItem = $(e.target).closest('tr').children('td');
        var computerName = dataItem[1].innerText;
        var location = dataItem[4].innerText;

        debugger;

        window.location.href = '@Url.Action("Task","TodoList")' + '?ComputerName='+ computerName + '&Location=' + location;
    }

    function gotoTaskSubCardEdit(e) {
        e.preventDefault();
        var dataItem = $(e.target).closest('tr').children('td');
        var computerName = dataItem[0].innerText;
        var taskID = dataItem[1].innerText;

        window.location.href = '@Url.Action("SubCardEdit", "TodoList")' + '?ComputerName=' + computerName + '&TaskID=' + taskID;
    }

    function UpdateTaskKSP(e) {
        e.preventDefault();
        var dataItem = $(e.target).closest('tr').children('td');
        var computerName = dataItem[1].innerText;
        var username = dataItem[2].innerText;

        var Url = '@Url.Action("UpdateTask", "TodoList")';

        Swal.fire({
            title: 'Comfirmation ?',
            text: 'ต้องการ Update Task ทั้งหมดของเครื่อง ' + computerName + ' ใช่หมือไร่ ?',
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Yes',
        }).then((result) => {
            if (result.isConfirmed) {
                $.ajax({
                    url: Url,
                    type: 'POST',
                    data: { 'computerName': computerName, 'Username': username, 'Location': 'KSP' },
                    success: function (response) {

                        RefreshGridKSP();
                        RefreshGridHQ();

                        debugger;
                        if (response.IsError === false) {
                            Swal.fire({
                                position: 'center',
                                icon: 'success',
                                title: response.message,
                                showConfirmButton: false,
                                timer: 1800
                            });
                        } else {
                            Swal.fire({
                                title: response.message,
                                icon: 'warning',
                            })
                        }
                    }
                })
            }
        })

    }

    function UpdateTaskHQ(e) {
        e.preventDefault();
        var dataItem = $(e.target).closest('tr').children('td');
        var computerName = dataItem[1].innerText;
        var username = dataItem[2].innerText;

        var Url = '@Url.Action("UpdateTask", "TodoList")';

        Swal.fire({
            title: 'Comfirmation ?',
            text: 'ต้องการ Update Task ทั้งหมดของเครื่อง ' + computerName + ' ใช่หมือไร่ ?',
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Yes',
        }).then((result) => {
            if (result.isConfirmed) {
                $.ajax({
                    url: Url,
                    type: 'POST',
                    data: { 'computerName': computerName, 'Username': username, 'Location': 'HQ' },
                    success: function (response) {

                        RefreshGridKSP();
                        RefreshGridHQ();

                        Swal.fire({
                            position: 'center',
                            icon: 'success',
                            title: response.message,
                            showConfirmButton: false,
                            timer: 1800
                        });
                    },
                    error: function (err) {
                        Swal.fire({
                            title: 'Error ..',
                            icon: 'warning',
                        })
                    }
                })
            }
        })

    }

    function RefreshGridKSP() {
        var grid = $("#GridKSP").data("kendoGrid");
        grid.dataSource.read();
    }

    function RefreshGridHQ() {
        var grid = $("#GridHQ").data("kendoGrid");
        grid.dataSource.read();
    }

    function gotoTaskManageKSP() {
        window.location.href = '@Url.Action("TaskManageKSP", "TodoList")';
    }

    function gotoTaskManageHQ() {
        window.location.href = '@Url.Action("TaskManageHQ", "TodoList")';
    }

    function onError(e, status) {
        if (e.status == "customerror") {
            Swal.fire({
                title: e.errors,
                icon: 'warning'
            })
        }
        else {
            alert("Generic server error.");
        }
    }

</script>